generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // if using Bun with Prisma latest
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  image         String?
  isAdmin       Boolean   @default(false)
  emailVerified DateTime? // Added for magic link email verification
  createdAt     DateTime  @default(now())

  accounts  Account[]
  sessions  Session[]
  reviews   Review[]
  favorites Favorite[]
}

model Neighborhood {
  id          String     @id @default(uuid())
  name        String
  city        String
  state       String
  zip         String
  description String?
  createdAt   DateTime   @default(now())
  reviews     Review[]
  favorites   Favorite[]
}

model Review {
  id             String       @id @default(uuid())
  rating         Int
  comment        String?
  createdAt      DateTime     @default(now())
  userId         String
  neighborhoodId String
  user           User         @relation(fields: [userId], references: [id])
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
}

model Favorite {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  userId         String
  neighborhoodId String
  user           User         @relation(fields: [userId], references: [id])
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])

  @@unique([userId, neighborhoodId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
